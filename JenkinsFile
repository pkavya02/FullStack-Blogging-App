pipeline {
    agent any
    
    tools {
        jdk 'jdk-17'
        maven 'maven3'
    }
    
    environment{
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/pkavya02/FullStack-Blogging-App'
            }
        }
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        stage('Trivy FS Scan') {
            steps {
                sh "trivy fs --format table -o fs.html ."
            }
        }
        stage('SonarQube Analysis') {
            steps {
               withSonarQubeEnv('sonar-server') {
               sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Blogging-app -Dsonar.projectKey=Blogging-app\
                     -Dsonar.java.binaries=target'''
               }
            }
        }
        stage('Build') {
            steps {
                sh "mvn package"
            }
        }
        stage('Publish Artifact') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-settings', jdk: 'jdk-17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                 sh "mvn deploy"
                }
            }
        }
        stage('Docker Build & Tag') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                      sh "docker build -t pkavya555/blogging-app:latest1 ."
                    }
                }
            }
        }
        stage('Trivy image Scan') {
            steps {
                sh "trivy image --format table -o image.html pkavya555/blogging-app:latest1"
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                      sh "docker push pkavya555/blogging-app:latest1"
                    }
                }
            }
        }
        stage('k8 Deploy') {
            steps {
                script {
                 withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://00A9E7895CB8AE141350B1A78EF865FB.yl4.ap-south-1.eks.amazonaws.com') {
                  sh "kubectl apply -f deployment-service.yml --validate=false"
                  sh "sleep 20"
                 }
                }
            }
        }
        stage('Verification Deploy') {
            steps {
                script {
                 withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://00A9E7895CB8AE141350B1A78EF865FB.yl4.ap-south-1.eks.amazonaws.com') {
                  sh "kubectl get pods"
                  sh "kubectl get svc"
                 }
                }
            }
        }
    }
    
}
